buildscript {
  ext {
    buildToolsVersion = "33.0.0"
    minSdkVersion = 21
    compileSdkVersion = 33
    targetSdkVersion = 33
    ndkVersion = "23.1.7779620"
    kotlinVersion = "1.8.0"
    gradleVersion = "7.5.1"
  }
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["RNIterable_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath("com.android.tools.build:gradle:${gradleVersion}")
    classpath("com.facebook.react:react-native-gradle-plugin")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def isFabricEnabled() {
  return rootProject.hasProperty("fabricEnabled") && rootProject.getProperty("fabricEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "com.facebook.react"

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["RNIterable_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["RNIterable_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.iterable.reactnative"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion rootProject.ext.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"

    if (isNewArchitectureEnabled()) {
      buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "true")
      if (isFabricEnabled()) {
        buildConfigField("boolean", "IS_FABRIC_ENABLED", "true")
      } else {
        buildConfigField("boolean", "IS_FABRIC_ENABLED", "false")
      }
    } else {
      buildConfigField("boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false")
      buildConfigField("boolean", "IS_FABRIC_ENABLED", "false")
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    buildConfig true
  }

  // Configure build variants for old and new architecture
  flavorDimensions "architecture"
  productFlavors {
    oldArch {
      dimension "architecture"
      buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
    }
    newArch {
      dimension "architecture"
      buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "true"
    }
  }

  // Configure source sets for each architecture
  sourceSets {
    oldArch {
      java.srcDirs = ['src/main/java', 'src/oldArch/java']
    }
    newArch {
      java.srcDirs = ['src/main/java', 'src/newArch/java']
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "com.facebook.react:react-android:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  api "com.iterable:iterableapi:3.5.2"
  // api project(":iterableapi") // links to local android SDK repo rather than by release

  // Architecture-specific dependencies
  oldArchImplementation "com.facebook.react:react-native-gradle-plugin"
  newArchImplementation "com.facebook.react:react-native-gradle-plugin"
  newArchImplementation "com.facebook.react:react-native-turbomodule-core"
  newArchImplementation "com.facebook.react:react-native-turbomodule-interface"
}

// Configure React Native
react {
  // Enable Hermes
  hermesCommand = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc"
  // Enable new architecture
  newArchEnabled = true
}

// Configure publishing
afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        from components.release
        groupId = 'com.iterable'
        artifactId = 'react-native-sdk'
        version = '2.0.0'
      }
    }
  }
}

allprojects {
  repositories {
    maven {
      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
      url("$rootDir/../node_modules/react-native/android")
    }
    maven {
      // Android JSC is installed from npm
      url("$rootDir/../node_modules/jsc-android/dist")
    }
    mavenCentral {
      // We don't want to fetch react-native from Maven Central as there are
      // older versions over there.
      content {
        excludeGroup "com.facebook.react"
      }
    }
    google()
    maven { url 'https://www.jitpack.io' }
  }
}

